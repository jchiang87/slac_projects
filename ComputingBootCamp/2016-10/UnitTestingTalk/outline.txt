* Why test code?

* What is unit testing?
  * types of tests
  * benefits of unit tests
    * ensures code quality and makes debugging easier, thereby
      reducing development time
    * serves as interface documentation as it provides canonical usage
      examples
    * enables aggressive refactoring

* How to write and use unit tests - some recommended practices
  * Test for success, failure, consistency
  * Unit tests should be quick, self-checking, and compact
  * Unit tests should be run often during development in order
    to pinpoint bugs as soon as they are introduced.
  * When dealing with a new bug, write a unit test that exposes it.
    Once the test passes, you are done.  Keep the test as part of the
    test suite.
  * Similarly for new features, write the unit test code first.  The
    development is finished as soon as the test passes.  Adhering to
    these steps have two benefits:
    * Forces the developer to concentrate on interfaces rather than
      underlying implementation.
    * Helps ensure that only the needed code is added, and so reduces
      the likelihood of introducing new bugs via untested features.
  * Make sure the full suite of tests in package pass before pushing
    your code.

* A few words on "coverage"
  Coverage is the fraction of code that is tested by the full test
  suite. 100% coverage is "ideal", but with limited resources it is
  better to concentrate on testing the parts of the code that are
  riskiest in the sense that the cost of failure is the greatest. This
  means that even if some code is straight-forward, if its failure has
  signficant adverse consequences, it should be tested.  Conversely,
  if some code is tricky but tends to fail in an inconsequential way,
  devote your limited resources for writing tests elsewhere.

* Unit testing frameworks
<start with an example TestCase class>
  * runs all tests and aggregates results
  * only reports failures (with details)
  * provides assertion methods for different types of tests
  * enables use of test "fixtures" which allow one to define
    precisely the environment or context in which the test runs.
  * allows one to define "test suites" that can be run to test
    related but otherwise isolated parts of the code.
  * For python, unittest (and its xunit cousins), py.test, numpy.testing,

* Unit test examples
  * .setUp, .tearDown
  * class level fixtures
  * asserts (Equals, Raises, for containers)
  * white box vs black box tests

* Continuous Integration
  * Tests at all levels are run regularly over the whole code base
    to ensure that the software is in an operational state.
    * CI server testing can include static code checking, coverage
      assessment, unit tests, integration tests, performance tests,
      and aggregation of metrics including time histories.
  * CI systems such as Travis-CI and Jenkins can be run to trigger
    on code respository events, such as commits or pull-requests, or
    to run on regular intervals (nightly builds).
  * In order for CI to be effective, work should be committed and
    tested on at least a daily basis in order to prevent conflicts
    which are difficult to resolve and which stem from large commits,
    e.g., a week's worth of work.
  * For revision systems where branching is available, CI builds
    can be performed for the branch against the current master,
    and should not be merged unless it builds correctly.
  * These practices help keep the mainline of the code in a deployable
    state at all times, and provide current builds for testing by
    clients.

* Using Travis-CI
  * free for public github-hosted repositories
    * Show how to connect to the github repo
  * example .travis.yml file
  * connect to Coveralls
  * Badges in GitHub repo to show build and coverage status.


Fowler on Unit testing:
- Make sure tests are fully automatic and that they check their own results.

  It's tedious to run test for which you have to manually check that
  output is correct, and as a result, you will run the tests less
  often.

- A suite of tests is a powerful bug detector that decapitates the time
  it takes to find bugs.

  In the absence of tests, the assertion is that most programming time
  is spent debugging, and most of the time spent debugging is finding
  the bug.  During development, running a fairly complete set of tests
  continuously as you add code will tell you right away when and
  (usually) where you've introduced a bug.

- Run your tests frequently. Localize tests whenever you compile --
  every test at least every day.

  This ensures that any bugs that are introduced during development
  are found right away.  For running a full suite of tests, a CI
  system is indispensible.

- When you get a bug report, start by writing a unit test that
  exposes the bug.

  This helps you indentify the nature of the bug very precisely since
  you want the code that exercises the bug to be as compact as
  possible.  You will know that your development is done when the
  added test passes.  This is the rationale for Test Driven
  Development.

- It is better to write and run incomplete tests than not to run
  complete tests.

  Some tests are better than none even if they are not complete.
  Tests should be written for code that is likely to be complicated to
  implement, i.e., "risky" code; but more precisely, tests should be
  implemented for any code for which its failure would have the
  greatest cost: even if the code is straight-forward, if its used in
  contexts where its failure would break crucial functionality,
  stringent unit tests should be written and run routinely.

- Think of the boundary conditions under which things might go wrong
  and concentrate your tests there.

  This includes things like entry and exit points of loops where
  off-by-one errors occur, cases where defaults are things like empty
  or non-existent files, etc..

- Don't forget to test that exceptions are raised when things are
  expected to go wrong.

  If the code raises exceptions, then that is part of its interface
  and should be subject to tests, especially if client code is
  expected to handle those exceptions in some particular way.

- Don't let the fear that testing can't catch all bugs stop you from
  writing the tests that will catch most bugs.

  100% testing coverage is a nice goal, but it can be a tall mountain
  to climb.  It's better to concentrate ones efforts on implementing
  good tests that will likely prove most useful in maintaining code
  quality.
